package com.robert.blend.hibernate.domain;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.Formula;

@Entity
@Table(name = "news_info")
public class News {

	private Integer Id;

	private String name;

	private String content;

	private String fullContent;

	private String nothing;

	private Season season;

	private Date date;

	/**
	 * @return the id
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	public Integer getId() {
		return Id;
	}

	/**
	 * @param id
	 *            the id to set
	 */
	public void setId(Integer id) {
		Id = id;
	}

	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * @param name
	 *            the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @return the content
	 */
	public String getContent() {
		return content;
	}

	/**
	 * @param content
	 *            the content to set
	 */
	public void setContent(String content) {
		this.content = content;
	}

	/**
	 * <p>
	 * <p>
	 * 使用@Formula注解修饰的属性不需要采用数据列保存，该属性将由系统根据SQL表达式来生成。
	 * </p>
	 * <dl>
	 * <dt>@Formula注解的使用注意事项：</dt>
	 * <dd>value="(sql)"的英文括号不能少</dd>
	 * <dd>英文括号中的为SQL表达式，SQL表达式的列名和表名都应该和数据库对应</dd>
	 * <dd>value中的参数，将当前持久化对象的属性作为参数注入</dd>
	 * </dl>
	 * </p>
	 * 
	 * @return the fullContent
	 */
	@Formula("(select concat(nt.title,nt.content) from news_info nt where nt.id=id)")
	public String getFullContent() {
		return fullContent;
	}

	/**
	 * @param fullContent
	 *            the fullContent to set
	 */
	public void setFullContent(String fullContent) {
		this.fullContent = fullContent;
	}

	/**
	 * <p>
	 * 使用@Transient注解修饰不想持久化的属性
	 * </p>
	 * 
	 * @return the nothing
	 */
	@Transient
	public String getNothing() {
		return nothing;
	}

	/**
	 * @param nothing
	 *            the nothing to set
	 */
	public void setNothing(String nothing) {
		this.nothing = nothing;
	}

	/**
	 * <p>
	 * 使用@Enumerated注解修饰枚举类型的属性
	 * </p>
	 * <p>
	 * 对于枚举值而言，即可在程序中通过枚举值的名字来代表，也可使用枚举值的序号来代表。<br/>
	 * <table>
	 * <tr>
	 * <td>value属性的值</td>
	 * <td></td>
	 * </tr>
	 * <tr>
	 * <td>EnumType.STRING</td>
	 * <td>底层数据库保存枚举的名称</td>
	 * </tr>
	 * <tr>
	 * <td>EnumType.ORDINAL</td>
	 * <td>底层数据库保存枚举值的序号</td>
	 * </tr>
	 * </table>
	 * </p>
	 * 
	 * @return the season
	 */
	@Enumerated(EnumType.STRING)
	@Column(name = "happen_season")
	public Season getSeason() {
		return season;
	}

	/**
	 * @param season
	 *            the season to set
	 */
	public void setSeason(Season season) {
		this.season = season;
	}

	/**
	 * @return the date
	 */
	public Date getDate() {
		return date;
	}

	/**
	 * @param date
	 *            the date to set
	 */
	public void setDate(Date date) {
		this.date = date;
	}

}
