package com.robert.blend.hibernate.event;

import org.hibernate.event.internal.DefaultLoadEventListener;

/**
 * <p>
 * Hibernate的事件框架由两个部分组成： <br/>
 * <ul>
 * <li>拦截器机制：对于特定动作拦截，回调应用中的特定动作</li>
 * <li>事件系统：重写hibernate的事件监听器</li>
 * </ul>
 * </p>
 * <p>
 * Session接口的每个方法都有对应的事件，比如LoadEvent、FlushEvent等。当Session调用某个方法时，Hibernate
 * Session会生成对应的事件，并激活对应的事件监听器。
 * </p>
 * <p>
 * 监听器是单例模式对象，即所有同类型的事件处理共享同一个监听示例，因此监听器不应该保存任何状态，即不应该使用成员变量。
 * </p>
 * <p>
 * 事件系统开发步骤<br/>
 * <ul>
 * <li>实现自己的事件监听器类<br/>
 * <ol>
 * <li>实现对应的监听器接口：实现接口必须实现接口内的所有方法，关键是必须实现Hibernate对应的持久化操作，即数据库访问。</li>
 * <li>继承事件适配器：可以有选择性地实现需要关注的方法，但依然视图取代hibernate完成数据库的访问</li>
 * <li>继承系统默认的事件监听器：扩展特定方法</li>
 * </ol>
 * </li>
 * <li>
 * 注册自定义事件监听器，代替系统默认的事件监听器<br/>
 * <ol>
 * <li>appendListeners()：该方法有两个重载的版本，都用于将自定义的事件监听器追加到系统默认的事件监听器序列的后面</li>
 * <li>prependListeners()：该方法有两个重载的版本，都用于将自定义的事件监听器追加到系统默认的事件监听器序列的前面</li>
 * <li>setListeners()：该方法有两个重载的版本，都用于将自定义的事件监听器代替系统默认的事件监听器序列</li>
 * </ol>
 * </li>
 * </ul>
 * 
 * </p>
 * 
 * @author CHEN
 *
 */
public class MyLoaderListener extends DefaultLoadEventListener {

}
