package com.robert.blend.thinking.innerclass;

public class MyInnerClass {

	public String pro1 = "pro1";

	/**
	 * <p>
	 * 像一个属性样定义在外部类中，可以使用外部类所有的成员
	 * </p>
	 * <p>
	 * <table>
	 * <tr>
	 * <td>静态内部类</td>
	 * <td><code>public static String pro3 = "pro3";
	 * static class Hello3 {
	 * public void print() {
	 * System.out.println(pro3);
	 * }
	 * }</code></td>
	 * <td>不能定义在方法体内</td>
	 * </tr>
	 * </table>
	 * </p>
	 * 
	 * @author CHEN
	 *
	 */
	class Hello {
		public void print() {
			System.out.println(pro1);
		}
	}

	public String pro2 = "pro2";

	public void outerPrint() {

		final int j = 0;

		class Hello2 {
			public void innerPrint() {
				System.out.println(pro2);
				System.out.println("j value is " + j);
			}
		}
		new Hello2().innerPrint();

	}

	public static String pro3 = "pro3";

	static class Hello3 {
		public void print() {
			System.out.println(pro3);
		}
	}

	public String pro4 = "pro4";

	public void threadPrint() {
		new Thread(new Runnable() {

			@Override
			public void run() {
				System.out.println(pro4);
			}
		}).start();
	}
}
